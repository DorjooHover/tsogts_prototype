import * as React from "react";
import { styled, useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import MuiDrawer from "@mui/material/Drawer";
import MuiAppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import ListItem from "@mui/material/ListItem";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import InboxIcon from "@mui/icons-material/MoveToInbox";
import MailIcon from "@mui/icons-material/Mail";
import Navbar from "../../src/components/student/Navbar";
import {
  Dashboard,
  LocalLibrary,
  Person,
  EventAvailable,
} from "@mui/icons-material";
import StudentDashboard from "../../src/components/student/dashboard";
import StudentCourse from "../../src/components/student/course";
import StudentSchedule from "../../src/components/student/schedule";
import StudentProfile from "../../src/components/student/profile";
import { useState } from "react";
import Head from "next/head";
function SidebarIcon(props) {
  switch (props.index) {
    case 0:
      return <Dashboard />;
    case 1:
      return <LocalLibrary />;
    case 2:
      return <Person />;
    case 3:
      return <EventAvailable />;
    default:
      return <></>;
  }
}
function StudentDashboards(props) {
  switch (parseInt(props.sidebar)) {
    case 0:
      return <StudentDashboard />;
    case 1:
      return <StudentCourse />;
    case 2:
      return <StudentSchedule />;
    case 3:
      return <StudentProfile />;
    default:
      return <></>;
  }
}
const drawerWidth = 240;

const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: "hidden",
});

const closedMixin = (theme) => ({
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: "hidden",
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up("sm")]: {
    width: `calc(${theme.spacing(9)} + 1px)`,
  },
});

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
}));

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const Drawer = styled(MuiDrawer, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  width: drawerWidth,
  flexShrink: 0,
  whiteSpace: "nowrap",
  boxSizing: "border-box",
  ...(open && {
    ...openedMixin(theme),
    "& .MuiDrawer-paper": openedMixin(theme),
  }),
  ...(!open && {
    ...closedMixin(theme),
    "& .MuiDrawer-paper": closedMixin(theme),
  }),
}));

export default function Students() {
  const theme = useTheme();
  const [open, setOpen] = React.useState(false);
  const [sidebar, setSidebar] = useState(0);
  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  const handleSidebar = (e) => {
    console.log(e.target.id);
    setSidebar(e.target.id);
  };
  return (
    <Box sx={{ display: "flex" }}>
      <Head>
        <title>Сурагч</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="./img/logo/lil_logo.png" />
      </Head>
      <CssBaseline />
      <AppBar
        position="fixed"
        open={open}
        className="bg-white shadow-none py-2"
      >
        <Toolbar>
          <IconButton
            className="text-black"
            aria-label="open drawer"
            onClick={handleDrawerOpen}
            edge="start"
            sx={{
              marginRight: "36px",
              ...(open && { display: "none" }),
            }}
          >
            <MenuIcon />
          </IconButton>
          <Navbar dashboard={sidebar} />
        </Toolbar>
      </AppBar>

      <Drawer variant="permanent" open={open}>
        <DrawerHeader>
          <div onClick={handleDrawerClose}>
            {theme.direction === "rtl" ? (
              <IconButton>
                <ChevronRightIcon />
              </IconButton>
            ) : (
              <div className="flex">
                <img src="/img/logo/logo_png.png" alt="logo" className="h-10" />
                <IconButton>
                  <ChevronRightIcon />
                </IconButton>
              </div>
            )}
          </div>
        </DrawerHeader>
        <Divider />
        <List>
          {["Dashboard", "Courses", "Schedule", "Profile"].map(
            (text, index) => (
              <ListItem
                button
                key={text}
                className="relative sidebar_current my-2 "
              >
                <ListItemIcon>
                  <SidebarIcon index={index} />
                </ListItemIcon>
                <ListItemText primary={text} />
                <span
                  className="absolute z-20 inset-0 "
                  onClick={handleSidebar}
                  id={index}
                ></span>
              </ListItem>
            )
          )}
        </List>
        {/* <Divider />
        <List>
          {["All mail", "Trash", "Spam"].map((text, index) => (
            <ListItem button key={text}>
              <ListItemIcon>
                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}
              </ListItemIcon>
              <ListItemText primary={text} />
            </ListItem>
          ))}
        </List> */}
      </Drawer>
      <Box component="main" sx={{ flexGrow: 1, p: 3, ml: 3 }}>
        <DrawerHeader />

        <StudentDashboards sidebar={sidebar} />
      </Box>
    </Box>
  );
}
